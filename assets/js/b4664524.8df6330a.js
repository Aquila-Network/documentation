"use strict";(self.webpackChunkaquila=self.webpackChunkaquila||[]).push([[307],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return l}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),d=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(a),l=r,f=p["".concat(c,".").concat(l)]||p[l]||m[l]||i;return a?n.createElement(f,s(s({ref:t},u),{},{components:a})):n.createElement(f,s({ref:t},u))}));function l(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9043:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),s=["components"],o={sidebar_position:5},c="Creating a database",d={unversionedId:"db/concepts/database/Creating a database",id:"db/concepts/database/Creating a database",isDocsHomePage:!1,title:"Creating a database",description:"A database creation process starts from schema definition. Below is the pseudo-code to generate a database from given schema:",source:"@site/docs/db/concepts/database/Creating a database.md",sourceDirName:"db/concepts/database",slug:"/db/concepts/database/Creating a database",permalink:"/docs/db/concepts/database/Creating a database",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/db/concepts/database/Creating a database.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Schema Validation",permalink:"/docs/db/concepts/database/Schema validation"},next:{title:"Document",permalink:"/docs/db/concepts/Document"}},u=[{value:"At the user / client side",id:"at-the-user--client-side",children:[],level:3},{value:"At the server / Aquila DB side",id:"at-the-server--aquila-db-side",children:[],level:3}],m={toc:u};function p(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-a-database"},"Creating a database"),(0,i.kt)("p",null,"A database creation process starts from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Aquila-Network/specs/blob/main/adb/Schema.md#schema-definition"},"schema definition"),". Below is the pseudo-code to generate a database from given schema:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: content inside angle brackets ",(0,i.kt)("inlineCode",{parentName:"p"},"<>")," should be replaced accordingly based on the programming language used.")),(0,i.kt)("h3",{id:"at-the-user--client-side"},"At the user / client side"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'user_defined_schema = {\n    "description": "Database description",\n    "unique": "random string",\n    "encoder": "example.com/autoencoder.model",\n    "codelen": <vector length integer>,\n    "metadata": {\n        "key 1": "type",\n        "key 2": "type",\n        ...\n    }\n}\n\ndef sign_message (JSON_object):\n    return <Refer Aquila DB API specification to see modified JSON which is returned>\n\n# call Aquila DB API to create a database and get database name in return\ndatabase_name = AquilaDB_DB_create_API(sign_message(user_defined_schema))\n')),(0,i.kt)("h3",{id:"at-the-server--aquila-db-side"},"At the server / Aquila DB side"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def AquilaDB_DB_create_API (user_defined_schema):\n    # predefine metadata to be used in schema\n    metadata_pre = {}\n    for each `key` in sorted(user_defined_schema.metadata.list_keys()):\n        metadata_pre[`key`] = {\n            "type": <user_defined_schema.metadata[key]>\n        }\n    \n    # generate actual schema from user defined schema\n    generated_schema = { \n        "$schema": "http://json-schema.org/schema#", \n        "$id": "//aquilanetwork/schema/id/v1", \n        "title": "Schema", \n        "description": <user_defined_schema.description>,\n        "encoder": <user_defined_schema.encoder>,\n        "unique": <user_defined_schema.unique>,\n        "type": "object",\n        "properties": {\n            "code": {\n                "description": "Encoded data",\n                "type": "array",\n                "maxItems": <user_defined_schema.codelen>\n                "items": {\n                    "type": "number"\n                }\n            },\n            "metadata": {\n                "$ref": "#/definitions/metadata"\n            }\n        },\n        "definitions": {\n            "metadata": {\n                "description": "User defined metadata",\n                "type": "object",\n                "properties": <metadata_pre>,\n                "required": [<user_defined_schema.metadata.list_keys()>]\n            }\n        },\n        "required": ["code", "metadata"]\n    }\n    \n    # generate database name from content ID of schema\n    # refer schema specification for pseudo-code\n    database_name = CID(generated_schema)\n    # create <AquilaDB data>/<database name> directory inside host file system \n    # & keep a copy of schema, empty key-value storage & empty vector storage\n    status = init_database(database_name, generated_schema)\n    # return database name with status\n    return status, database_name\n')))}p.isMDXComponent=!0}}]);