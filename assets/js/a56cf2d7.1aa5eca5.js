"use strict";(self.webpackChunkaquila=self.webpackChunkaquila||[]).push([[158],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=d(n),f=r,p=b["".concat(c,".").concat(f)]||b[f]||u[f]||o;return n?a.createElement(p,i(i({ref:t},l),{},{components:n})):a.createElement(p,i({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},3955:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return l},default:function(){return b}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:1},c="Database (Search Index)",d={unversionedId:"db/concepts/database/Database",id:"db/concepts/database/Database",isDocsHomePage:!1,title:"Database (Search Index)",description:"A database in Aquila DB is a collection of documents that conforms to a schema definition. It can also be considered as a search index since one of its main function is to serve nearest neighbour queries from within the indexed documents. A database name is universal and is deterministically generated from it's schema definition's content address.",source:"@site/docs/db/concepts/database/Database.md",sourceDirName:"db/concepts/database",slug:"/db/concepts/database/Database",permalink:"/docs/db/concepts/database/Database",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/db/concepts/database/Database.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Notion of a wallet",permalink:"/docs/db/concepts/authentication/Notion of a wallet"},next:{title:"Schema",permalink:"/docs/db/concepts/database/Schema"}},l=[{value:"Life cycle of a database",id:"life-cycle-of-a-database",children:[],level:5}],u={toc:l};function b(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"database-search-index"},"Database (Search Index)"),(0,o.kt)("p",null,"A database in Aquila DB is a collection of documents that conforms to a schema definition. It can also be considered as a search index since one of its main function is to serve nearest neighbour queries from within the indexed documents. A database name is universal and is deterministically generated from it's ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Aquila-Network/specs/blob/main/adb/Schema.md"},"schema")," definition's ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Aquila-Network/specs/blob/main/adb/Content%20Addressing.md"},"content address"),"."),(0,o.kt)("h5",{id:"life-cycle-of-a-database"},"Life cycle of a database"),(0,o.kt)("p",null,"A database is not owned by anyone, but a document is, - owned by a wallet. Databases can neither be created nor be destroyed. It exists forever in the realm of possible combinations constrained by the set of symbols and string length (base-58, 44 characters). A new database can be discovered by making changes to the schema definition (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Aquila-Network/specs/blob/main/adb/Content%20Addressing.md#cid-in-aquila-db"},"refer the algorithm for database naming"),"). A database can only be transformed from one another, by making changes to schema definition, followed an application of a ",(0,o.kt)("inlineCode",{parentName:"p"},"transformation function")," over each and every document entries."))}b.isMDXComponent=!0}}]);