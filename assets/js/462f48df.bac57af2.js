"use strict";(self.webpackChunkaquila=self.webpackChunkaquila||[]).push([[422],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,k=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return t?a.createElement(k,s(s({ref:n},u),{},{components:t})):a.createElement(k,s({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3804:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),s=["components"],i={sidebar_position:2},l="Python 3",p={unversionedId:"hub/apis/python",id:"hub/apis/python",isDocsHomePage:!1,title:"Python 3",description:"All API requests should be cryptographically signed before making into Aquila DB. Below are the generic steps for making API requests.",source:"@site/docs/hub/apis/python.md",sourceDirName:"hub/apis",slug:"/hub/apis/python",permalink:"/docs/hub/apis/python",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/hub/apis/python.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/docs/hub/apis/API"},next:{title:"Node JS",permalink:"/docs/hub/apis/javascript"}},u=[{value:"API definitions",id:"api-definitions",children:[{value:"Transparency APIs",id:"transparency-apis",children:[],level:3},{value:"Transaction APIs",id:"transaction-apis",children:[],level:3}],level:2}],c={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-3"},"Python 3"),(0,o.kt)("p",null,"All API requests should be cryptographically signed before making into Aquila DB. Below are the generic steps for making API requests."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Prepare a JSON message as it is specified under each API below."),(0,o.kt)("li",{parentName:"ol"},"Sign the JSON message as specified in ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/Aquila-Network/specs/blob/main/adb/Asymmetric%20key%20signing.md#pseudo-code-for-generating-signature-of-a-json-request"},"asymmetric key signing")," section."),(0,o.kt)("li",{parentName:"ol"},"Wrap JSON message and signature in the following request format: ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'data = {\n    "data": <JSON message>,\n    "signature": signature\n}\n')),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Make API request with header ",(0,o.kt)("inlineCode",{parentName:"li"},'headers["Content-Type"] = "application/json"'),".")),(0,o.kt)("h2",{id:"api-definitions"},"API definitions"),(0,o.kt)("h3",{id:"transparency-apis"},"Transparency APIs"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"1. Get Aquila DB node status:")," "),(0,o.kt)("p",null,"[GET]","  /"),(0,o.kt)("p",null,"request:  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"{}\n")),(0,o.kt)("p",null,"response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{\n    "success": <Boolean>,\n    "message": <String>\n}\n')),(0,o.kt)("h3",{id:"transaction-apis"},"Transaction APIs"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"1. Create a database:")),(0,o.kt)("p",null,"[POST]","  /db/create"),(0,o.kt)("p",null,"request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{ \n    "schema": <JSON schema definition> \n}\n')),(0,o.kt)("p",null,"response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{\n    "success": <Boolean>,\n    "database_name": <String>\n}\n')),(0,o.kt)("h3",{id:""}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"2. Insert documents:")),(0,o.kt)("p",null,"[POST]","  /db/doc/insert"),(0,o.kt)("p",null,"request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{ \n    "docs": <JSON documents array>, \n    "database_name": <database name>\n}\n')),(0,o.kt)("p",null,"response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{\n    "success": <Boolean>,\n    "ids": <String array>\n}\n')),(0,o.kt)("h3",{id:"-1"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"3. Delete documents:")),(0,o.kt)("p",null,"[POST]","  /db/doc/delete"),(0,o.kt)("p",null,"request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{ \n    "ids": <Document id array>, \n    "database_name": <database name> \n}\n')),(0,o.kt)("p",null,"response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{\n    "success": <Boolean>,\n    "ids": <String array>\n}\n')),(0,o.kt)("h3",{id:"-2"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"4. Search k documents:")),(0,o.kt)("p",null,"[GET]","  /db/search"),(0,o.kt)("p",null,"request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{ \n    "matrix": <2D array for batch search>, \n    "k": <number k>, # Optional\n    "r": <number k>, # Optional\n    "database_name": <database name> \n}\n')),(0,o.kt)("p",null,"response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{\n    "success": <Boolean>,\n    "docs": <2D JSON array>,\n    "dists": <2D Floating-point array>\n}\n')))}d.isMDXComponent=!0}}]);