"use strict";(self.webpackChunkaquila=self.webpackChunkaquila||[]).push([[323],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,f=d["".concat(s,".").concat(h)]||d[h]||l[h]||o;return n?i.createElement(f,a(a({ref:t},u),{},{components:n})):i.createElement(f,a({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9148:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=["components"],c={sidebar_position:1},s="Authentication & Ownership",p={unversionedId:"db/concepts/authentication/Authentication & Ownership",id:"db/concepts/authentication/Authentication & Ownership",isDocsHomePage:!1,title:"Authentication & Ownership",description:'All the API interactions and data operations in Aquila DB and across Aquila Network (directly or indirectly) is "Authenticated" and most of them is then recorded as a transaction log along with the proof of "ownership". "Authentication" is usually completed followed by an "Authorization" of the identity.',source:"@site/docs/db/concepts/authentication/Authentication & Ownership.md",sourceDirName:"db/concepts/authentication",slug:"/db/concepts/authentication/Authentication & Ownership",permalink:"/docs/db/concepts/authentication/Authentication & Ownership",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/db/concepts/authentication/Authentication & Ownership.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Content Addressing",permalink:"/docs/db/concepts/Content Addressing"},next:{title:"Asymmetric key signing",permalink:"/docs/db/concepts/authentication/Asymmetric key signing"}},u=[],l={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"authentication--ownership"},"Authentication & Ownership"),(0,o.kt)("p",null,"All the ",(0,o.kt)("inlineCode",{parentName:"p"},"API interactions")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"data operations")," in Aquila DB and across Aquila Network (directly or indirectly) is ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Authentication"},(0,o.kt)("inlineCode",{parentName:"a"},'"Authenticated"'))," and most of them is then recorded as a ",(0,o.kt)("inlineCode",{parentName:"p"},"transaction log")," along with the ",(0,o.kt)("a",{parentName:"p",href:"https://en.bitcoin.it/wiki/Proof_of_Ownership"},(0,o.kt)("inlineCode",{parentName:"a"},'proof of "ownership"')),". ",(0,o.kt)("inlineCode",{parentName:"p"},'"Authentication"')," is usually completed followed by an ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Authorization"},(0,o.kt)("inlineCode",{parentName:"a"},'"Authorization"'))," of the identity."),(0,o.kt)("p",null,"Aquila Network enables All three - Authentication, Authorization and ownership elegantly by enabling ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Decentralized_identifiers"},"DID")," and assumes each DID as a separate ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Agent_(economics)"},"agent"),". It is open to any DIDs as long as a unique identifier is supplied as identity URI (base-58 string) along with proof (base-58 string) of ownership over performed operation. And this identity proof should be validated externally with a service which is obvious and accessible to all concerned nodes in Aquila Network."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"}," DIDs compatible with Aquila Network is supposed to grow over time with additions and deprecation. Currently, the specification is compatible with ",(0,o.kt)("inlineCode",{parentName:"p"},"RSA")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ECDSA")," based DIDs only.")))}d.isMDXComponent=!0}}]);