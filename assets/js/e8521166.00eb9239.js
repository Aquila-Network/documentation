"use strict";(self.webpackChunkaquila=self.webpackChunkaquila||[]).push([[830],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3457:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],c={sidebar_position:5},s="Vector search",l={unversionedId:"db/concepts/Vector search",id:"db/concepts/Vector search",isDocsHomePage:!1,title:"Vector search",description:"It is mentioned in other part of the specification that, Aquila DB keeps document and vector indices separately. Any operation on document keys or vectors are separately done. Aquila DB internally maintains a mapping between vectors and documents to keep consistency between them.",source:"@site/docs/db/concepts/Vector search.md",sourceDirName:"db/concepts",slug:"/db/concepts/Vector search",permalink:"/docs/db/concepts/Vector search",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/db/concepts/Vector search.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Document",permalink:"/docs/db/concepts/Document"},next:{title:"API",permalink:"/docs/db/apis/API"}},p=[{value:"Vector indexing",id:"vector-indexing",children:[],level:3},{value:"Domain constraints in search",id:"domain-constraints-in-search",children:[{value:"Full search",id:"full-search",children:[],level:3},{value:"Bucket search",id:"bucket-search",children:[],level:3}],level:2},{value:"Content constraints in search",id:"content-constraints-in-search",children:[{value:"k-NN search",id:"k-nn-search",children:[],level:3},{value:"Radius search",id:"radius-search",children:[],level:3}],level:2},{value:"Notion of error",id:"notion-of-error",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"vector-search"},"Vector search"),(0,i.kt)("p",null,"It is mentioned in other part of the specification that, Aquila DB keeps document and vector indices separately. Any operation on document keys or vectors are separately done. Aquila DB internally maintains a mapping between vectors and documents to keep consistency between them."),(0,i.kt)("h3",{id:"vector-indexing"},"Vector indexing"),(0,i.kt)("p",null,"Vector indexes are long matrices having dimension ",(0,i.kt)("strong",{parentName:"p"},"d"),"x",(0,i.kt)("strong",{parentName:"p"},"n"),". ",(0,i.kt)("strong",{parentName:"p"},"d")," is a fixed number for a database and is computed as ",(0,i.kt)("strong",{parentName:"p"},"min("),(0,i.kt)("a",{parentName:"p",href:"https://github.com/Aquila-Network/specs/blob/main/adb/Creating%20a%20database.md#at-the-server--aquila-db-side"},(0,i.kt)("strong",{parentName:"a"},"schema.maxItems")),",  ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Aquila-Network/AquilaDB/blob/master/src/DB_config.yml"},(0,i.kt)("strong",{parentName:"a"},"config.docs.vd")),(0,i.kt)("strong",{parentName:"p"},")"),". ",(0,i.kt)("strong",{parentName:"p"},"n")," is the number of vectors inserted to the database (and not deleted) so far. Maintaining a single long matrix is just a concept. An implementation of Aquila DB is expected to keep the index as small chunks to enable distributed scaling and data redundancy (reliability). "),(0,i.kt)("p",null,"There is a set of methods to do chunking called bucketization. These methods try to come up with a hashing (central point) algorithm which clusters vectors based on their distance from one another. Popular examples include pre-trained ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/K-means_clustering"},"k-means clustering"),", ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Locality-sensitive_hashing"},"locality sensitive hashing"),", special ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Rolling_hash"},"rolling hashes")," etc. "),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: Official Aquila DB implementation currently uses k-means clustering to generate buckets.")),(0,i.kt)("h2",{id:"domain-constraints-in-search"},"Domain constraints in search"),(0,i.kt)("h3",{id:"full-search"},"Full search"),(0,i.kt)("p",null,"Full search allows anyone to search the entire matrix chunks without any constraints. This should be done when in need for 100% accuracy with a trade-off of increased latency. Aquila DB implementations should do an exhaustive search over all distributed instances at once."),(0,i.kt)("h3",{id:"bucket-search"},"Bucket search"),(0,i.kt)("p",null,"Bucket searches are limited to a pre-configured / dynamically specified number of closest buckets. This improves search performance with a trade-off of reduced accuracy. Scale of accuracy drops purely depends upon the bucketization algorithm used by implementations. Please refer ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Aquila-Network/specs/blob/main/adb/Vector%20search.md#notion-of-error"},"Notion of error")," section below for more information on measuring accuracy of implementations."),(0,i.kt)("h2",{id:"content-constraints-in-search"},"Content constraints in search"),(0,i.kt)("h3",{id:"k-nn-search"},"k-NN search"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Nearest_neighbor_search"},"k-NN search")," is performed to retrieve ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," number of nearest vectors to the query vector from the database. Search API should take in the limit ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," along with the query vector and should return maximum ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," vectors as response. k-NN search is pre-constrained by the domain constraints applicable."),(0,i.kt)("h3",{id:"radius-search"},"Radius search"),(0,i.kt)("p",null,"Radius search performs ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Nearest_neighbor_search"},"k-NN search")," to retrieve all vectors within a specified radius ",(0,i.kt)("inlineCode",{parentName:"p"},"r")," to query vector. Search API should take in the radius ",(0,i.kt)("inlineCode",{parentName:"p"},"r")," along with the query vector and should return all vectors within ",(0,i.kt)("inlineCode",{parentName:"p"},"r")," as response. k-NN search is pre-constrained by the domain constraints applicable."),(0,i.kt)("h2",{id:"notion-of-error"},"Notion of error"),(0,i.kt)("p",null,"Aquila DB transparency APIs should include ",(0,i.kt)("inlineCode",{parentName:"p"},"error metric benchmark"),". Below are the expected results along with pseudo-code to generate them:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"coming soon\n")))}d.isMDXComponent=!0}}]);